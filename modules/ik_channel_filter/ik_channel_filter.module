<?php

/**
 * @file
 *
 */

/**
 * Implements hook_menu().
 *
 * Defines auto complete callbacks for the different field types.
 */
function ik_channel_filter_menu() {
  $items = array();

  $items['ik/autocomplete'] = array(
    'title' => 'Autocomplete channel filter',
    'page callback' => '_ik_channel_filter_autocomplete',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );

  $items['ik/preview/update'] = array(
    'title' => 'Update slides preview',
    'page callback' => '_ik_channel_preview_update',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
    'file' => 'ik_channel_filter.queries.inc',
  );

  return $items;
}

/**
 * Autocomplete callback for the field. It searches the database for the value
 * parsed in the string variable based on the field settings.
 *
 * @param type $field_name
 *  Name of the field that makes the request for auto completion.
 * @param type $string
 *  The value/string to search for.
 */
function _ik_channel_filter_autocomplete($field_name, $string = '') {
  // Make sure the field exists and is a channel filter field.
  if (!($field = field_info_field($field_name)) || $field['type'] !== 'ik_channel_filter_search') {
    echo t('Channel filter field @field_name not found.', array('@field_name' => $field_name));
    exit;
  }

  $matches = array();
  if ($string != '') {
    // Search the database based on the type of content that we are looking for.
    switch ($field['settings']['ik_search']['type']) {
      case 'types':
      case 'og':
        // Find the node types to look up.
        $types = array_filter($field['settings']['ik_search'][$field['settings']['ik_search']['type']]);

        $query = db_select('node', 'n');
        $query->addTag('translatable');
        $query->addTag('content_access');

        // Select rows that match by title.
        $results = $query
          ->fields('n', array('nid', 'title'))
          ->condition('n.type', $types)
          ->condition('n.status', 1)
          ->condition('n.title', '%' . db_like($string) . '%', 'LIKE')
          ->range(0, 10)
          ->execute()
          ->fetchAllKeyed();
        break;

      case 'vocabulary':
        // Find vocabularies that we should search for the term.
        $vids = array();
        $vocabularies = taxonomy_vocabulary_get_names();
        $vids[] = $vocabularies[$field['settings']['ik_search']['vocabulary']]->vid;

        $query = db_select('taxonomy_term_data', 't');
        $query->addTag('translatable');
        $query->addTag('term_access');

        // Select rows that match by term.
        $results = $query
          ->fields('t', array('tid', 'name'))
          ->condition('t.vid', $vids)
          ->condition('t.name', '%' . db_like($string) . '%', 'LIKE')
          ->range(0, 10)
          ->execute()
          ->fetchAllKeyed();
        break;

      default:
        echo t('Channel filter field @field_name do not support the selected type @type.', array(
          '@field_name' => $field_name,
          '@type' => $field['settings']['ik_search']['type'])
        );
        exit;
        break;
    }

    // Check plain results.
    foreach ($results as $label) {
      $matches[$label] = check_plain($label);
    }
  }

  // Encode and return matches.
  drupal_json_output($matches);
}

/**
 * Implements hook_field_info().
 *
 */
function ik_channel_filter_field_info() {
  return array(
    'ik_channel_filter_search' => array(
      'label' => t('Channel filter'),
      'description' => t('Filter channel content base on user data'),
      'default_widget' => 'ik_filter_search_widget',
      'default_formatter' => 'ik_filter_search_formatter',
    ),
    'ik_channel_filter_preview' => array(
      'label' => t('Channel preview'),
      'description' => t('Previw channel filter results'),
      'default_widget' => 'ik_filter_search_preview',
      'default_formatter' => 'ik_filter_search_preview_formatter'
    ),
  );
}

/**
 * Implements hook_field_validate().
 *
 */
function ik_channel_filter_field_validate($entity_type, $entity, $field, $instance, $langcode, $items, &$errors) {

}

/**
 * Implements hook_field_is_empty().
 *
 */
function ik_channel_filter_field_is_empty($item, $field) {
  return empty($item['data']);
}

/**
 * Implements hook_field_widget_info().
 *
 * Tell Drupal about the search autocomplete widget, that should be used to
 * select the slids.
 */
function ik_channel_filter_field_widget_info() {
  return array(
    'ik_filter_search_autocomplete' => array(
      'label' => t('Default'),
      'field types' => array('ik_channel_filter_search'),
    ),
    'ik_filter_search_preview' => array(
      'label' => t('Default'),
      'field types' => array('ik_channel_filter_preview'),
    ),
    'ik_filter_search_preview_thumbnail' => array(
      'label' => t('Thumbnail'),
      'field types' => array('ik_channel_filter_preview'),
    ),
  );
}

/**
 * Implements hook_field_settings_form().
 *
 */
function ik_channel_filter_field_settings_form($field, $instance, $has_data) {
  $settings = isset($field['settings']['ik_search']) ? $field['settings']['ik_search'] : array();
  $form = array();

  switch ($field['type']) {
    case 'ik_channel_filter_preview':
      // Get infomation about fields on current content type.
      $info = field_info_instances('node'); /* @todo: get entity type from instance */
      $info = $info[$instance['bundle']];

      // Find all channel filter fields on the current content type.
      $fields = array();
      foreach ($info as $field_name => $field_instance) {
        if ($field_instance['widget']['type'] == 'ik_filter_search_autocomplete') {
          $fields[$field_name] = filter_xss_admin($field_instance['label']);
        }
      }

      $form['ik_search']['types'] = array(
        '#type' => 'checkboxes',
        '#title' => t('Channel filter fields'),
        '#description' => t('Select the Channel filter fields that should be used to select the slides displayed.'),
        '#options' => $fields,
        '#default_value' => isset($settings['types']) ? $settings['types'] : array(),
      );
      break;

    case 'ik_channel_filter_search':
      $form['ik_search'] = array(
        '#type' => 'fieldset',
        '#title' => t('Field search settings'),
      );

      $options = array(
        'vocabulary' => 'Vocabularies',
        'og' => 'Organic groups',
        'types' => 'Content types',
      );

      $form['ik_search']['type'] = array(
        '#type' => 'radios',
        '#title' => t('Search type'),
        '#options' => $options,
        '#default_value' => isset($settings['type']) ? $settings['type'] : '',
        '#required' => TRUE,
      );


      // Find options to display for each type defined above, when they are selected.
      $values = array(
        'vocabulary' => array(),
        'og' => array(),
        'types' => array(),
      );

      // Get all vocabulary names.
      $vocabularies = taxonomy_get_vocabularies();
      foreach ($vocabularies as $vocabulary) {
        $values['vocabulary'][$vocabulary->machine_name] = $vocabulary->name;
      }

      // Get all content type names.
      $types = node_type_get_types();
      foreach ($types as $key => $type) {
        $values['types'][$key] = $type->name;
      }

      // Get all content types that are organic groups.
      $ogs = og_get_all_group_bundle();
      foreach ($ogs['node'] as $key => $name) {
        $values['og'][$key] = $name;
      }

      // Display settings for each of the above types and display them base on the
      // one selected.
      foreach ($options as $type => $name) {
        $form['ik_search'][$type] = array(
          '#type' => $type == 'vocabulary' ? 'radios' : 'checkboxes',
          '#title' => check_plain($name),
          '#options' => $values[$type],
          '#default_value' => isset($settings[$type]) ? $settings[$type] : array(),
          '#states' => array(
            'visible' => array(
              ':input[name="field[settings][ik_search][type]"]' => array(
                array('value' => $type),
              ),
            ),
          ),
        );
      }

      // Get all avaliable fields linked to taxonomy.
      $options = array();
      $fields = field_info_fields();
      foreach ($fields as $f) {
        if ($f['module'] == 'taxonomy') {
          $options[$f['field_name']] = $f['field_name'] . ' (' . implode(',', $f['bundles']['node']) . ')';
        }
      }

      // Display found fields, if vocabulary is selected.
      $form['ik_search']['fields'] = array(
        '#type' => 'radios',
        '#title' => t('Taxonomy fields to search'),
        '#description' => t('To speed up preformance you need to select the fields that should be searched and linked to these terms.'),
        '#options' => $options,
        '#default_value' => isset($settings['fields']) ? $settings['fields'] : array(),
        '#states' => array(
          'visible' => array(
            ':input[name="field[settings][ik_search][type]"]' => array(
              array('value' => 'vocabulary'),
            ),
          ),
        ),
      );

      $form['ik_search']['operation'] = array(
        '#type' => 'radios',
        '#title' => t('Field operations'),
        '#description' => t('The function to used between this field and other channel filter fields on this content type.'),
        '#options' => array(0 => 'AND', 1 => 'OR'),
        '#default_value' => isset($settings['operation']) ? $settings['operation'] : 0,
      );
      break;
  }

  return $form;
}

/**
 * Implements hook_field_widget_form().
 *
 * The form that is used to display the widget defined above in the widget info
 * hook.
 */
function ik_channel_filter_field_widget_form(&$form, &$form_state, $field, $instance, $langcode, $items, $delta, $element) {
  $element += array(
    '#type' => 'fieldset',
  );

  switch ($instance['widget']['type']) {
    case 'ik_filter_search_preview':
      if (isset($element['#entity']->nid)) {
        $field_names = isset($field['settings']['ik_search']['types']) ? $field['settings']['ik_search']['types'] : array();

        // Get values that should be used to find slides.
        $values = array();
        foreach ($field_names as $fieldname) {
          $data = $element['#entity']->$fieldname;
          if (!empty($data[$langcode][$delta]['data'])) {
            $values[$fieldname] = $data[$langcode][$delta]['data'];
          }
        }

        // Get slides.
        module_load_include('inc', 'ik_channel_filter', 'ik_channel_filter.queries');
        $slides = ik_channel_filter_get_slides($values);

        // Theme the slides as a list for now.
        $items = array();
        foreach ($slides as $slide) {
          $items[] = $slide->title;
        }

        // Add javascript to handle live update of filter results.
        drupal_add_js(array('ik_channel_preview' => array('field_names' => $field_names)), 'setting');
        drupal_add_js(drupal_get_path('module', 'ik_channel_filter') . '/js/ik_channel_preview.js');

        // Return information about the slides.
        $element['message'] = array(
          '#prefix' => '<div class="ik-filter-preview-wrapper">',
          '#markup' => t('@count slides found', array('@count' => count($slides))) . theme('item_list', array('items' => $items)),
          '#suffix' => '</div>',
        );
      }
      else {
        $element['message'] = array(
          '#prefix' => '<div class="ik-filter-preview-wrapper">',
          '#markup' => t('No slides found matching filter.'),
          '#suffix' => '</div>',
        );
      }
      break;

    case 'ik_filter_search_preview_thumbnail':
      $element['error'] = array(
        '#prefix' => '<div class="ik-filter-preview-wrapper">',
        '#markup' => t('Thumbnail preview formatter have not yet been implemented'),
        '#suffix' => '</div>',
      );
      break;

    case 'ik_filter_search_autocomplete':
      $field_content = isset($items[$delta]['data']) ? $items[$delta]['data'] : '';
      $element['data'] = array(
        '#type' => 'hidden',
        '#default_value' => $field_content,
        '#attributes' => array(
          'class' => array(
            'ik-channel-filter-values',
          ),
        ),
      );

      /**
       * @todo: create them funtion for this
       *
       * theme('ik_channel_filter_results', $items[$delta]['results']);
       *
       */
      $output = '';
      if (!empty($field_content)) {
        $field_items = explode('|', $field_content);
        foreach ($field_items as $item) {
          $output .= '<li><span class="value">' . $item . '</span><a class="button ik-channel-filter-remove">' . t('Remove') . '</a></li>';
        }
      }

      $element['search']['results'] = array(
        '#prefix' => '<ul class="ik-channel-filter-results">',
        '#markup' => $output,
        '#suffix' => '</ul>',
      );

      $element['search']['field'] = array(
        '#type' => 'textfield',
        '#attributes' => array(
          'placeholder' => isset($instance['default_value'][$delta]['search']['field']) ? $instance['default_value'][$delta]['search']['field'] : 'Search',
        ),
        '#attached' => array(
          'js' => array(
            drupal_get_path('module', 'ik_channel_filter') . '/js/ik_channel_filter.js',
          ),
          'css' => array(
            drupal_get_path('module', 'ik_channel_filter') . '/css/ik_channel_filter.css',
          ),
        ),
        '#autocomplete_path' => 'ik/autocomplete/' . $field['field_name'],
        '#required' => $element['#required'],
      );

      $element['search']['button'] = array(
        '#markup' => l(t('Add'), '#', array(
          'attributes' => array(
            'class' => array(
              'button',
              'ik-channel-filter-add-button',
            ),
          ),
        )),
      );

      break;
  }

  return $element;
}

/**
 * Implements hook_field_widget_error().
 *
 */
function ik_channel_filter_field_widget_error($element, $error, $form, &$form_state) {

}

/**
 * Implements hook_field_formatter_info().
 *
 */
function ik_channel_filter_field_formatter_info() {
  return array(
    'ik_channel_filter_preview_formatter' => array(
      'label' => t('Default'),
      'field types' => array('ik_channel_filter_preview'),
    ),
    'ik_channel_filter_preview_count_formatter' => array(
      'label' => t('Number of slides'),
      'field types' => array('ik_channel_filter_preview'),
    ),
    'ik_channel_filter_preview_images_formatter' => array(
      'label' => t('Screenshots'),
      'field types' => array('ik_channel_filter_preview'),
      'settings' => array('image_style' => '', 'limit' => 0, 'link' => 0),
    ),
  );
}

/**
 * Implements hook_field_formatter_settings_form().
 */
function ik_channel_filter_field_formatter_settings_form($field, $instance, $view_mode, $form, &$form_state) {
  if ($instance['display'][$view_mode]['type'] == 'ik_channel_filter_preview_images_formatter') {
    $display = $instance['display'][$view_mode];
    $settings = $display['settings'];

    $element = array();

    $image_styles = image_style_options(FALSE);
    $element['image_style'] = array(
      '#title' => t('Image style'),
      '#type' => 'select',
      '#default_value' => $settings['image_style'],
      '#empty_option' => t('None (original image)'),
      '#options' => $image_styles,
    );

    $element['limit'] = array(
      '#title' => t('Limit screenshots'),
      '#type' => 'checkbox',
      '#description' => t('Only show the channels first slide screenshot.'),
      '#default_value' => $settings['limit'],
      '#empty_option' => 0,
    );

    $element['link'] = array(
      '#title' => t('Link to slide'),
      '#type' => 'checkbox',
      '#description' => t('Link the screenshot image to the slide node.'),
      '#default_value' => $settings['link'],
      '#empty_option' => 0,
    );

    return $element;
  }
}

/**
 * Implements hook_field_formatter_settings_summary().
 */
function ik_channel_filter_field_formatter_settings_summary($field, $instance, $view_mode) {
  if ($instance['display'][$view_mode]['type'] == 'ik_channel_filter_preview_images_formatter') {
    $display = $instance['display'][$view_mode];
    $settings = $display['settings'];

    $summary = array();

    $image_styles = image_style_options(FALSE);
    // Unset possible 'No defined styles' option.
    unset($image_styles['']);
    // Styles could be lost because of enabled/disabled modules that defines
    // their styles in code.
    if (isset($image_styles[$settings['image_style']])) {
      $summary[] = t('Image style: @style', array('@style' => $image_styles[$settings['image_style']]));
    }
    else {
      $summary[] = t('Original image');
    }

    return implode('<br />', $summary);
  }
}

/**
 * Implements hook_field_formatter_view().
 *
 * Defines different formatters for the slide preview filter used on the channel
 * node edit and in views.
 */
function ik_channel_filter_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  $element = array();
  $settings = $display['settings'];

  switch ($display['type']) {
    case 'ik_channel_filter_preview_formatter':
      // Find the slides.
      $slides = ik_channel_filter_formatter_helper($field, $entity, $langcode);

      // Theme the slides as a list for now.
      $items = array();
      foreach ($slides as $slide) {
        $items[] = l($slide->title, "node/" . $slide->nid);
      }

      $element['preview'] = array(
        '#prefix' => '<div class="ik-filter-preview-wrapper">',
        '#markup' => t('@count slides found', array('@count' => count($slides))) . theme('item_list', array('items' => $items)),
        '#suffix' => '</div>',
      );
      break;

    case 'ik_channel_filter_preview_count_formatter':
      // Find the slides.
      $slides = ik_channel_filter_formatter_helper($field, $entity, $langcode);
      $element['preview'] = array(
        '#prefix' => '<div class="ik-filter-preview-wrapper">',
        '#markup' => format_plural(count($slides), '1 slide', '@count slides'),
        '#suffix' => '</div>',
      );
      break;

    case 'ik_channel_filter_preview_images_formatter':
      // Get slides.
      $slides = ik_channel_filter_formatter_helper($field, $entity, $langcode);
      $elements = array();

      // Transform array to be index by nid.
      $data = array();
      foreach ($slides as $slide) {
        $data[$slide->nid] = $slide->title;
      }

      // Get image URIs.
      $results = array();
      if ($settings['limit']) {
        // Limit active only get first slide image.
        if (!empty($slides)) {
          $slide = $slides[0];
          $query = db_select('field_data_field_ik_slide_preview', 'f')
            ->fields('f', array('entity_id', 'field_ik_slide_preview_image'))
            ->condition('entity_id', $slide->nid, '=');
          $results = $query->execute();
        }
      }
      else {
        // No limit get all slide images.
        if (!empty($data)) {
          $query = db_select('field_data_field_ik_slide_preview', 'f')
            ->fields('f', array('entity_id', 'field_ik_slide_preview_image'))
            ->condition('entity_id', array_keys($data), 'IN');
          $results = $query->execute();
        }
      }

      // Build render array with the image(s).
      foreach ($results as $row) {
        $elements[$row->entity_id] = array(
          '#theme' => 'image_formatter',
          '#item' => array(
            'uri' => $row->field_ik_slide_preview_image,
            'alt' => $data[$row->entity_id],
            'title' => $data[$row->entity_id],
          ),
          '#image_style' => $settings['image_style'],
          '#path' => '',
        );

        // Should the screenshot link to the slide.
        if ($settings['link']) {
          $elements[$row->entity_id]['#path'] = array(
            'path' => 'node/' . $row->entity_id,
            'options' => array(),
          );
        }
      }

      // Render the images.
      $element['preview'] = array(
        '#prefix' => '<div class="ik-filter-preview-wrapper">',
        '#markup' => drupal_render($elements),
        '#suffix' => '</div>',
      );
      break;
  }

  return $element;
}

/**
 * Finds slids based on the channel entity and preview field settings. Used by
 * the preview channel filter formatters.
 *
 * @param type $field
 * @param type $entity
 * @param type $langcode
 *
 * @return array
 *  The slides founds title and nid's.
 */
function ik_channel_filter_formatter_helper($field, $entity, $langcode) {
  // Get filter fields used.
  $field_names = isset($field['settings']['ik_search']['types']) ? $field['settings']['ik_search']['types'] : array();

  // Get values that should be used to find slides.
  $values = array();
  foreach ($field_names as $fieldname) {
    $data = $entity->$fieldname;
    if (!empty($data[$langcode][0]['data'])) {
      $values[$fieldname] = $data[$langcode][0]['data'];
    }
  }

  // Load queries to find slide based on the field values found.
  module_load_include('inc', 'ik_channel_filter', 'ik_channel_filter.queries');
  return ik_channel_filter_get_slides($values);
}

/**
 * Implements hook_token_info().
 */
function ik_channel_filter_token_info() {
  return array(
    'types' => array(
      'ik_channel' => array(
        'name' => t('IK Channels'),
        'description' => t('Tokens used to generate ID\'s for channels'),
      ),
    ),
    'tokens' => array(
      'ik_channel' => array(
        'hash' => array(
          'name' => t('Channel hash'),
          'description' => t('Hash value the identifies a channel'),
        ),
      ),
    ),
  );
}

/**
 * Implements hook_tokens().
 *
 * Used in path-auto to build the channel path.
 */
function ik_channel_filter_tokens($type, $tokens, array $data = array(), array $options = array()) {
  $replacements = array();

  if ($type == 'ik_channel') {
    foreach ($tokens as $name => $original) {
      switch ($name) {
        case 'hash':
          if (isset($data['node'])) {
            $replacements[$original] = ik_channel_filter_token($data['node']->nid);
          }
          break;
      }
    }
  }

  return $replacements;
}

/**
 * Creates a token to use as the identifier for a given channel.
 *
 * @param type $nid
 * @return type
 */
function ik_channel_filter_token($nid) {
  // Generate the token.
  $token = md5($nid + drupal_get_private_key());
  return $token;
}
